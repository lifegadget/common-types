export interface IServerlessApiGatewayConfig {
  /** REST API resource ID. Default is generated by the framework */
  restApiId?: string;
  /** Root resource ID, represent as / path */
  restApiRootResourceId?: string;
  /**
   * List of existing resources that were created in the REST API. This is
   * required or the stack will be conflicted.
   */
  restApiResources?: Record<string, string>;
  /** Websocket API resource ID. Default is generated by the framework */
  websocketApiId?: string;
  /** Source of API key for usage plan. HEADER or AUTHORIZER. */
  apiKeySourceType?: "HEADER" | "AUTHORIZER";
  /** List of API keys to be used by your service API Gateway REST API */
  apiKeys?: Array<
    string | Record<string, { customerId?: string; description?: string; value: string }>
  >;
  /**
   * Compress response when larger than specified size in bytes (must be between 0 and 10485760).
   * Default is 1024.
   */
  minimumCompressionSize?: boolean;
  /** Optional description for the API Gateway stage deployment */
  description: string;
  /**
   * Optional binary media types the API might return. Should be represented as MIME type
   * or you can state "\*\/\*" for all types,
   */
  binaryMediaTypes?: string[];
  /** Optional detailed Cloud Watch Metrics */
  metrics?: boolean;
  /** Use `${service}-${stage}` naming for API Gateway. Will be `true` by default in next major version. */
  shouldStartNameWithService?: boolean;
  resourcePolicy?: IApiGatewayResourcePolicy[];
  /** Optional usage plan configuration */
  usagePlan?: IApiGatewayUsagePlan;
  request?: {
    /**
     * Optional request schema validation models that can be reused in `http` events.
     * It is always defined for `application/json` content type.
     */
    schemas?: Record<string, IApiGatewayRequestSchema>;
  };
}

export interface IApiGatewayRequestSchema {
  /** Name of the API Gateway model */
  name?: string;
  /**Description of the API Gateway model */
  description?: string;
  /** Valid JSON Schema */
  schema: string;
}

export interface IApiGatewayUsagePlan {
  quota?: {
    limit: number;
    offset?: number;
    period: "MONTH" | string;
  };
  throttle?: {
    burstLimit?: number;
    rateLimit?: number;
  };
}

export interface IApiGatewayResourcePolicy {
  Effect: "Allow" | "Deny";
  Principle: string;
  Action: string;
  Resource: string[];
  Condition: Record<"IpAddress" | string, string[]>;
}
